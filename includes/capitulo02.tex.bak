%Empieza configuracion de capitulo
\setstretch{1.0}
\titleformat{\chapter}[block]{\Large\bfseries}{CHAPTER \Huge\thechapter\vspace{25 pt}}{0 pt}{\\\fontsize{26}{36}\selectfont}
\titlespacing{\chapter}{0 pt}{30 pt}{50 pt}[0 pt]
\titleformat{\section}{\Large\bfseries}{\thesection}{0 pt}{\hspace{30 pt}}
\titleformat{\subsection}{\large\bfseries}{\thesubsection}{0 pt}{\hspace{30 pt}}
\pagestyle{fancy}
\fancyhead[LO,LE]{\footnotesize\textit{\leftmark}}
\fancyhead[RO,RE]{\thepage}
\fancyfoot[CO,CE]{}
%Termina configuracion de capitulo

\chapter{State of the Art} %Cambia al nombre de tu capitulo
\setstretch{1.5} %Regresa el interlineado a 1.5

\normalsize

\section{Related Work}
\noindent


Recent researches \cite{Saldana} \cite{Gallego} \cite{McMahon} \cite{Liu} are
showing an increasing interest in the topic. In all of them is proved that when
multiple voltage-scalable processors are available, the workload can be
distributed such that each processor runs at a very low-power level; meanwhile
the performance is compensated by parallelism. \cite{Weglarz} proposed
partitioning the computation onto a multi-processor architecture that consumes
significantly less power than a single processor.


In oder to do this is necesary to have mature techniques for inter-processor
communication, such as Message Passing Interfaces (MPI) \cite{lam-mpi}
\cite{mpi-forum}. The problem is that these abstraction layers require
extensive system resources with comprehensive operating systems support, which
may not be available to an embedded platform.

Recent researches \cite{Saldana} \cite{Gallego} \cite{McMahon} describe
proof-of-concept MPI implementations targeting embedded systems,  These papers
also discuss different ways to address the limitations found in typical
embedded systems. For example, in the eMPl/eMPICH project \cite{McMahon} the
main focus is to port MPICH to an embedded platform and reduce its memory
footprint by removing some MPI functions. Azequia-MPI \cite{Gallego} is an MPI
implementation that uses threads instead of processes making MPI applications
more lightweight, Although, it requires an operating system that supports
threads, which in embedded systems it is not always available. 

One of the most powerfull aproaches for MPI implementations for embedded
systems is the Lightweight Message Passing Interface(LMPI)\cite{Abgaria}. The
idea of LMPI is separation of its server part (LMPI server) and the very thin
client part (LMPI client). Both parts can reside on different hardware or on
the same hardware. Multiple clients can be associated with a server. LMPI
servers support full capability of MPI and can be implemented using
pre-existing MPI implementation. 

Although LMPI is dedicated to embedded systems, to demonstrate the benefits of
LMPI and show some initial results, \cite{Abgaria} built an LMPI server using
MPICH on a non-embedded system. LMPI client consumes far less computation and
communication bandwidth than typical implementations of MPI, such as MPICH.  As
a result, LMPI client is suitable for embedded systems with limited computation
power and memory. They demonstrated the low overhead of LMPI clients on Linux
workstations, which is as low as 10\% of MPICH for two benchmark applications.
LMPI clients are highly portable because they don't rely on the operating
system support. All they require from the embedded system is networking support
to the LMPI server.

Thanks to all these works now is possible to see real distributed embedded
aplications. In \cite{Liu} the author implemented an image Processing algorithm
with MPI on a low voltage computter. As a result of these article the author
confirmed that the high-level distributed programming tools are readily
available to facilitate the design and exploration of distributed embedded
applications. However emphasize that the communication mechanism of MPI needs
further study (LMPI was not implemented yet at that point). 

As we can see there is a need to make new experiments with the latest
technology available. Nowadays we have ultra-low-voltage microprocessors
platforms, costumized operating systems for these platforms and  innovative
technologies for achieving MPI implementations. All these variables wil be
considered into the development of this current work.

\newpage

\clearpage
